'use client'

import { Button } from '@/components/ui/button'
import { CartItem } from '@/types'
import { formatCurrency } from '@/lib/utils'
import { FileText } from 'lucide-react'
import { pdf } from '@react-pdf/renderer'
import { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer'

interface CartPDFExportProps {
  cartItems: CartItem[]
  totalPrice: number | string
  itemsPrice: number | string
  shippingPrice: number | string
  taxPrice: number | string
}

// Create styles
const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#FFFFFF',
    padding: 30,
  },
  title: {
    fontSize: 20,
    marginBottom: 10,
    textAlign: 'center',
    fontWeight: 'bold',
  },
  subtitle: {
    fontSize: 12,
    marginBottom: 20,
    textAlign: 'center',
    color: '#666666',
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 14,
    marginBottom: 10,
    fontWeight: 'bold',
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5,
    fontSize: 10,
  },
  totalRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 10,
    paddingTop: 10,
    borderTopWidth: 1,
    borderTopColor: '#000000',
    fontSize: 12,
    fontWeight: 'bold',
  },
  table: {
    marginTop: 20,
  },
  tableHeader: {
    flexDirection: 'row',
    backgroundColor: '#F5F5F5',
    padding: 8,
    fontSize: 10,
    fontWeight: 'bold',
  },
  tableRow: {
    flexDirection: 'row',
    padding: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
    fontSize: 9,
  },
  tableCell: {
    flex: 1,
    paddingRight: 5,
  },
  tableCellId: {
    flex: 0.8,
    paddingRight: 5,
  },
  tableCellQty: {
    flex: 0.5,
    paddingRight: 5,
    textAlign: 'center',
  },
  tableCellPrice: {
    flex: 0.8,
    paddingRight: 5,
    textAlign: 'right',
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    flexDirection: 'row',
    justifyContent: 'space-between',
    fontSize: 8,
    color: '#666666',
  },
})

// PDF Document Component
const CartPDFDocument = ({ cartItems, totalPrice, itemsPrice, shippingPrice, taxPrice }: CartPDFExportProps) => {
  const now = new Date()
  
  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <Text style={styles.title}>Shopping Cart Export</Text>
        <Text style={styles.subtitle}>
          Generated on: {now.toLocaleDateString('vi-VN')} at {now.toLocaleTimeString('vi-VN')}
        </Text>
        
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Cart Summary</Text>
          <View style={styles.summaryRow}>
            <Text>Items Price:</Text>
            <Text>{formatCurrency(Number(itemsPrice))}</Text>
          </View>
          <View style={styles.summaryRow}>
            <Text>Shipping Price:</Text>
            <Text>{formatCurrency(Number(shippingPrice))}</Text>
          </View>
          <View style={styles.summaryRow}>
            <Text>Tax Price:</Text>
            <Text>{formatCurrency(Number(taxPrice))}</Text>
          </View>
          <View style={styles.totalRow}>
            <Text>Total Price:</Text>
            <Text>{formatCurrency(Number(totalPrice))}</Text>
          </View>
        </View>
        
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Products in Cart</Text>
          <View style={styles.table}>
            <View style={styles.tableHeader}>
              <Text style={styles.tableCellId}>Product ID</Text>
              <Text style={styles.tableCell}>Product Name</Text>
              <Text style={styles.tableCell}>SKU</Text>
              <Text style={styles.tableCellQty}>Qty</Text>
              <Text style={styles.tableCellPrice}>Price</Text>
            </View>
            {cartItems.map((item, index) => (
              <View key={index} style={styles.tableRow}>
                <Text style={styles.tableCellId}>{item.productId.substring(0, 8)}...</Text>
                <Text style={styles.tableCell}>{item.name}</Text>
                <Text style={styles.tableCell}>{item.slug}</Text>
                <Text style={styles.tableCellQty}>{item.qty}</Text>
                <Text style={styles.tableCellPrice}>{formatCurrency(item.price)}</Text>
              </View>
            ))}
          </View>
        </View>
        
        <View style={styles.section}>
          <Text style={styles.summaryRow}>
            Total Items: {cartItems.reduce((sum, item) => sum + item.qty, 0)}
          </Text>
          <Text style={styles.summaryRow}>
            Total Products: {cartItems.length}
          </Text>
        </View>
        
        <View style={styles.footer}>
          <Text>Generated by HQ Home E-commerce</Text>
          <Text>Page 1 of 1</Text>
        </View>
      </Page>
    </Document>
  )
}

export default function CartPDFExport({
  cartItems,
  totalPrice,
  itemsPrice,
  shippingPrice,
  taxPrice,
}: CartPDFExportProps) {
  const generatePDF = async () => {
    try {
      const blob = await pdf(
        <CartPDFDocument
          cartItems={cartItems}
          totalPrice={totalPrice}
          itemsPrice={itemsPrice}
          shippingPrice={shippingPrice}
          taxPrice={taxPrice}
        />
      ).toBlob()
      
      const pdfUrl = URL.createObjectURL(blob)
      window.open(pdfUrl, '_blank')
      
      // Clean up the URL after a delay
      setTimeout(() => {
        URL.revokeObjectURL(pdfUrl)
      }, 1000)
    } catch (error) {
      console.error('Error generating PDF:', error)
    }
  }

  return (
    <Button
      onClick={generatePDF}
      variant="outline"
      className="flex items-center gap-2 w-full"
    >
      <FileText className="h-4 w-4" />
      Export to PDF
    </Button>
  )
}
